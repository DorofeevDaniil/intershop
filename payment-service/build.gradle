
plugins {
    id 'org.openapi.generator' version '7.8.0'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.4.2'
    implementation 'jakarta.validation:jakarta.validation-api:3.1.1'
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.28'
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

openApiGenerate {
    generatorName.set("spring")
    inputSpec.set("$projectDir/src/main/resources/api-spec.yaml")
    outputDir.set("$projectDir/build/generated")
    ignoreFileOverride.set(".openapi-generator-java-sources.ignore")
    modelPackage.set("ru.custom.paymentservice.domain")
    invokerPackage.set("ru.custom.paymentservice")
    apiPackage.set("ru.custom.paymentservice.api")
    configOptions.set([
            hideGenerationTimestamp: "true",
            requestMappingMode: "controller",
            interfaceOnly: "true",
            library: "spring-boot",
            reactive: "true",
            useSpringBoot3: "true",
            useJakartaEe: "true",
            useTags: "true",
            dateLibrary: "java8",
            openApiNullable: "false",
            serializableModel: "true",
            returnSuccessCode: "true"
    ])
}

sourceSets.main.java.srcDir "$projectDir/build/generated/src/main/java"

tasks.named('compileJava') {
    dependsOn(tasks.openApiGenerate)
}

tasks.register('copyScripts') {
    dependsOn bootJar
    doLast {
        def outputDir = file("$buildDir/libs")
        def jarName = "${project.name}-${version}.jar"

        copy {
            from("$projectDir/scripts") {
                include '*.bat'
            }
            into(outputDir)
            expand([
                    JAR_NAME: jarName
            ])
        }
        println "Scripts copied to ${outputDir}"
    }
}

bootJar.finalizedBy('copyScripts')

tasks.register('generateReadme') {
    def jarName = "${project.name}-${project.version}.jar"
    def templateFile = file("$projectDir/scripts/README-template.md")
    def outputFile = file("$projectDir/README.md")

    if (!templateFile.exists()) {
        throw new GradleException("Template file not found: ${templateFile}")
    }

    def templateText = templateFile.text

    def readmeContent = templateText
            .replace('${APP_NAME}', project.name)
            .replace('${VERSION}', project.version.toString())
            .replace('${JAR_NAME}', jarName)

    outputFile.withWriter('UTF-8') { writer ->
        writer.write(readmeContent)
    }

    println "README.md generated at ${outputFile}"
}