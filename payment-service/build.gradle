
plugins {
    id 'org.openapi.generator' version '7.8.0'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.4.2'
    implementation 'jakarta.validation:jakarta.validation-api:3.1.1'
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.28'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

openApiGenerate {
    generatorName.set("spring")
    inputSpec.set("$projectDir/src/main/resources/api-spec.yaml")
    outputDir.set("$projectDir/build/generated")
    ignoreFileOverride.set(".openapi-generator-java-sources.ignore")
    modelPackage.set("ru.custom.paymentservice.domain")
    invokerPackage.set("ru.custom.paymentservice")
    apiPackage.set("ru.custom.paymentservice.api")
    configOptions.set([
            hideGenerationTimestamp: "true",
            requestMappingMode: "controller",
            interfaceOnly: "true",
            library: "spring-boot",
            reactive: "true",
            useSpringBoot3: "true",
            useJakartaEe: "true",
            useTags: "true",
            dateLibrary: "java8",
            openApiNullable: "false",
            serializableModel: "true",
            returnSuccessCode: "true"
    ])
}

sourceSets.main.java.srcDir "$projectDir/build/generated/src/main/java"

tasks.named('compileJava') {
    dependsOn(tasks.openApiGenerate)
}

bootJar.finalizedBy('generateBatScripts')

tasks.register('generateBatScripts') {
    dependsOn bootJar
    doLast {
        def outputDir = "${buildDir}/libs"
        def jarName = "${project.name}-${version}.jar"

        // Стартовый скрипт
        def startFile = new File(outputDir, "start.bat")
        startFile.text = """@echo off
setlocal
echo Starting application...
set JAR_NAME=${jarName}
echo Starting %JAR_NAME%...

start "storefront-app" java -jar "%~dp0%JAR_NAME%"
timeout /t 5 > nul

for /f "tokens=1,*" %%a in ('jps -lv ^| findstr /i "%JAR_NAME%"') do (
    echo %%a > "%~dp0app.pid"
    echo Application started with PID %%a
    goto end
)

echo Failed to find running application matching %JAR_NAME%

:end
endlocal
"""

        // Скрипт остановки
        def stopFile = new File(outputDir, "stop.bat")
        stopFile.text = """@echo off
setlocal

set "PID_FILE=%~dp0app.pid"

if exist "%PID_FILE%" (
    for /f "usebackq delims=" %%p in ("%PID_FILE%") do (
        set "PID=%%p"
        goto readDone
    )
    echo Could not read PID from file.
    goto end
) else (
    echo No PID file found. Is the application ${jarName} running?
    goto end
)

:readDone
echo Stopping application ${jarName} with PID [%PID%]
taskkill /PID %PID% /F
del "%PID_FILE%"
echo Application stopped.

:end
endlocal
"""
        println "Bat-scripts created: start.bat and stop.bat in ${outputDir}"
    }
}

tasks.register('generateReadme') {
    def versionName = project.version
    def appName = project.name
    def jarName = "${project.name}-${version}.jar"

    doLast {
        def readmeContent = """# Приложение ${appName}
## Версия: ${versionName}
Модуль, разработанный в рамках проектной рабты представляет из себя Сервис платежей.
Приложение предоставляет возможность получения фиатного баланса и проведения платежа.

## Генерация README.md
Для генерации README.md необходимо выполнить команду `./gradlew generateReadme`

## Сборка
Для сбоки необходимо в корне проекта выполнить команду    `./gradlew clean bootJar`

После этого jar-файл будет собран и расположен по пути `./build/libs`

## Запуск
### Unix-подобные системы
#### Запуск
Выполнить команду `./build/libs/${jarName} start`

#### Остановка
Выполнить команду `./build/libs/${jarName} stop`

### Windows
#### Запуск
Выполнить команду `./build/libs/start.bat start.bat`

> [!WARNING]
> Можно также запустить напрямую исполняемый jar-файл командой `./build/libs/${jarName}`,
> Однако остановка будет возможна только последовательным выполнением команд
> 1. `jps -lv | findstr /i ${appName}`
> 2. `taskkill /PID <PID> /f`

#### Остановка
Выполнить команду `./build/libs/stop.bat` (либо вручную открыть файл)

### Из исходного кода
#### Windows
Выполнить команду `./gradlew :${appName}:bootRun`

#### Unix-подобные системы `./gradlew :${appName}:bootRun`

### В Intellij IDEA
Открыть Run/Debug Configurations, добавить в конфигурацию запуска Environment variables с актуальным для запускаемой конфигурации содержимым
`DB_HOST=<DB_HOST>;DB_PORT=<DB_PORT>;DB_NAME=<DB_NAME>;POSTGRES_USER=<POSTGRES_USER>;POSTGRES_PASSWORD=<POSTGRES_PASSWORD>;REDIS_HOST=<REDIS_HOST>;REDIS_PORT=<REDIS_PORT>;PAYMENT_SERVICE_HOST=<PAYMENT_SERVICE_HOST>;PAYMENT_SERVICE_PORT=<PAYMENT_SERVICE_PORT>`

> [!NOTE]
>После запуска любым из вышеописанных способов API будет доступно по адресу http://localhost:8080/payment/<METHOD_PATH>

### Тестирование
Для запуска тестов необходимо выполнить команду `./gradlew test`"""
        file("README.md").text = readmeContent
    }
}