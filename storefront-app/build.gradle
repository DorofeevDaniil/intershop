buildscript {
    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:7.8.0"
    }
}

import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'org.openapi.generator' version '7.8.0'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.4.2'
    implementation 'jakarta.validation:jakarta.validation-api:3.1.1'
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.28'
    implementation 'org.liquibase:liquibase-core:4.32.0'
    implementation 'org.postgresql:postgresql:42.7.3'
    implementation 'org.thymeleaf:thymeleaf-spring6'
    implementation 'org.springframework:spring-tx'

    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    runtimeOnly 'org.postgresql:r2dbc-postgresql:1.0.2.RELEASE'

    testImplementation 'org.jsoup:jsoup:1.17.2'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'it.ozimov:embedded-redis:0.7.3'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }

    testImplementation('com.github.codemonstur:embedded-redis:1.4.3') {
        exclude group: 'org.json', module: 'json'
    }

    testImplementation('it.ozimov:embedded-redis:0.7.3') {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }

    implementation('org.springframework.boot:spring-boot-starter-logging') {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly "io.r2dbc:r2dbc-h2"
}

tasks.register('buildClient', GenerateTask) {
    generatorName.set("java")
    inputSpec.set("$projectDir/src/main/resources/api-spec.yaml")
    outputDir.set("$projectDir/build/generated")
    ignoreFileOverride.set(".openapi-generator-java-sources.ignore")
    modelPackage.set("ru.custom.storefrontapp.domain")
    invokerPackage.set("ru.custom.storefrontapp")
    apiPackage.set("ru.custom.storefrontapp.api")
    configOptions.set([
            hideGenerationTimestamp: "true",
            library                : "webclient",
            useJakartaEe           : "true",
            useTags                : "true",
            openApiNullable        : "false",
            serializableModel      : "true"
    ])
}

sourceSets.main.java.srcDir "$projectDir/build/generated/src/main/java"

tasks.named('compileJava') {
    dependsOn(tasks.buildClient)
}

tasks.register('copyScripts') {
    dependsOn bootJar
    doLast {
        def outputDir = file("$buildDir/libs")
        def jarName = "${project.name}-${version}.jar"

        copy {
            from("$projectDir/scripts") {
                include '*.bat'
            }
            into(outputDir)
            expand([
                    JAR_NAME: jarName
            ])
        }
        println "Scripts copied to ${outputDir}"
    }
}


bootJar.finalizedBy('copyScripts')

tasks.register('generateReadme') {
    def jarName = "${project.name}-${project.version}.jar"
    def templateFile = file("$projectDir/scripts/README-template.md")
    def outputFile = file("$projectDir/README.md")

    if (!templateFile.exists()) {
        throw new GradleException("Template file not found: ${templateFile}")
    }

    def templateText = templateFile.text

    def readmeContent = templateText
            .replace('${APP_NAME}', project.name)
            .replace('${VERSION}', project.version.toString())
            .replace('${JAR_NAME}', jarName)

    outputFile.withWriter('UTF-8') { writer ->
        writer.write(readmeContent)
    }

    println "README.md generated at ${outputFile}"
}